github temporal token (available till 09/27/2023) : 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

Configure username and email
git config --global user.name "Name Last" 
git config --global user.  email "email"

GIt Repository: A directory with .git folder, where all the contents are tracked for changes.

Remote: It refers to a server where the project code is present. For example, Github and Gitlab.

Commit: It is similar to version. When you make changes in a file, you need to commit the changes in orfer to save and create its new version, which will create a unigque commit hash (like version number).

Origin. Its a variable where Git stores the URL of your remote repository. For example, origin => www.github.com/username/myrepo


GIT BASIC COMMANDS

git intit adds .git folder and initializes the current folder to track its changes.
git status displays the current state of the staging area and the working directory, that is, which files are added/removed/modified.
git diff shows the exact changes with line and column number.
git add adds the changes to the staging area. If you have added a new file, this command starts tracking the file for modifications.
git commit will save all the changes with a unique hash number in the local repository.
git push sends the changes to the remote repository (server).


git clone: Get the complete project from remote to your local machine.
git pull origin <branch_name>: Get the new changes from remote branch to local branch.
git push origin <branch_name>: Send your local branch changes to the remote branch.
git remote add <name> <url>: Add a new remote repo link to your local repo.
git remote -v: List all the remote repo URLs linked to your local repo.

STAGES IN GIT

1	Working Area: You can edit files using your favorite editor/Integrated Development Environmet (IDE).
2	Staging Area: You have made the changes and added the changes to GIt. You can sill make changes here. (From the analogy explained in the next card) It is like taking an item out of the box, where the box is the staging area (git add).
3	Local repository: You have finalized the changes and commited them with a new hash and proper message. (git commit)

Remote repository: You cann ow push the changes to online platforms like Github or Gitlab from where others can collaborate. (git push)

GIT STAGES: ANALOGY

Git works in the three stages known as The Three Trees: Working Area, Staging Area, and Local Repository, which means Git maintains the three states of a file. To understand this better, let us take an analogy of a box.

Asume you are packing items in the house in different boxes and labeling them to identify it later.

Get a table and keep all items that you want to pack underneath. (git init)
Now you might select specific kitchen items, dust them, and club similar items (lke spoons) together. (doing changes - Working area)
Add the items that are ready to the box. (git add - Staged).
Seal the box and add a label - "Kitchen Items". (git commit - Commited)

After git commit, a unique hash is created and the changes are saved.

HEAD and DOT operators

HEAD is a reference variable that always points to the tip of your current branch, that is, recent commit of your current branch.

HEAD can be used with the following symbols to refer other commits:

- Tilde symbol (~): Used to point to the previous commits from base HEAD
- Caret sybol (^); Used to point to the immediate parent commit from the current referenced commit.

You can yse both tilde and caret symbols in combination with HEAD to refer specific commit:
	HEAD means (the reference to ) the recent commit og current branch -> F
		HEAD^1 means First parent of F -> E
		HEAD^2 means Second parent of G -> error as there is only one immediate parent commit
	HEAD~1 means (ther reference to) one commit before HEAD -> E
		HEAD~1^1 means First parent of E -> C
		HEAD~1^2 means Second parent of E -> D
		HEAD~1^3 means Third parent of E -> error
	HEAD~3 means (the reference to) three commits before HEAD -> B

Double DOT operator

It is the default operator in git diff
git diff maste..feature or git diff master feature command willl display all the diffferences from G to C (that is, including F and G)

Triple DOt operator

It shows the difference between master and feature branch starting at the last common commit E.
git diff master...feature command's output would be the difference in feature branch (that is, only A, B, and C).

GIT HISTORY

Whit multiple developers pushing new commits and changes, you might want to view the history of everything that happened with the repository.

Git provides the following commands, which allows you to read and review your repo's history:
	git log
	git show
	git diff

GIT LOG

Git log command shows the list of commits in the current branch. You can use it in the following ways:

	git log -2 displays the history of last two commits
	git log commit_id shows the history starting from commit_id
	git log filename displays the list of commits for the file

FLAGS

You can enhance the output of git log command using these optional flags:
	--oneline: Fits the log output to a single line
	--decorate: Adds a symbolic pointer to the output
	--graph: Gives a graphical representation to the log output
	--grep=<pattern>: Filters the log output and displays the output which matches the specified pattern

For example, git log --oneline

GIT SHOW

git show is a veraatile command which is similar to git log, but with fewer additional features.

You can pass different arguments like:
	commit_id
	tree

It shows the author's name, timestamp, commit message, and difference from the previous commit.

For commit range git show --oneline HEAD~2..HEAD , it gets resolved, and each commit is displayed individually.

GIT DIFF

git diff funtion takes two input datasets and outputs the changes between them.

Datasets can be commits, branch, files and more.
	
	git diff HEAD~1 HEAD shows the difference between two commits.

Let us take a sample git diff output as follows.

###### example of git diff output######
diff --git a/sample.txt b/sample.txt
index 8d3g6cv..f94e50c 574641
--- a/sample.txt
+++ b/sample.txt
@@ -1 +1 @@
-this is a git diff test example
+this is a diff example
#######################################

The linediff --git a/sample.txt b/sample.txt displays the input file for git diff

--- a/sample.txt +++ b/sample.txt

The changes from a/sample.txt are marked with --- and changes from b/sample.txt are marked with +++ symbol.

git log -p: Prints full details of each commit
git log --grep-reflog=<pattern>: Shows the list of commits when commit message matches regular expression pattern
git log --follow ./path/to/filename: Shows the history for the current file
git show: Outputs content changes of the specified commit
git diff --color-words: Output has only the color-coded words that have changed
git diff â€“staged: Shows the file differences between staging and the last committed version
git diff .path/to/file: Shows changes in a file compared to the previous commit